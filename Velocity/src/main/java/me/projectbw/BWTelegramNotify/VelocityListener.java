package me.projectbw.BWTelegramNotify;

import com.velocitypowered.api.event.Subscribe;
import com.velocitypowered.api.event.connection.PluginMessageEvent;
import com.velocitypowered.api.plugin.Plugin;
import com.velocitypowered.api.proxy.messages.ChannelIdentifier;
import com.velocitypowered.api.proxy.messages.MinecraftChannelIdentifier;
import com.velocitypowered.api.proxy.server.RegisteredServer;
import com.velocitypowered.api.proxy.ProxyServer;

import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.logging.Logger;

@Plugin(
    id = "velocitylistener",
    name = "VelocityListener",
    version = "1.0.0",
    description = "Listener –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Paper –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ö —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç"
)
public class VelocityListener {

    private static final ChannelIdentifier CHANNEL = MinecraftChannelIdentifier.from("bwtelegram:notify");
    private final ProxyServer server;
    private final Logger logger;
    private String paperHost;
    private int paperPort;

    @Inject
    public VelocityListener(ProxyServer server, Logger logger, @com.velocitypowered.api.plugin.annotation.DataDirectory Path dataFolder) {
        this.server = server;
        this.logger = logger;
        loadConfig(dataFolder.resolve("config.yml"));
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Paper
    private void loadConfig(Path configFile) {
        try {
            YamlConfiguration config = YamlConfiguration.loadConfiguration(configFile.toFile());
            paperHost = config.getString("velocity.host", "localhost");
            paperPort = config.getInt("velocity.port", 12345);
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è VelocityListener –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.");
        } catch (IOException e) {
            logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + e.getMessage());
        }
    }

    @Subscribe
    public void onPluginMessage(PluginMessageEvent event) {
        if (!event.getIdentifier().equals(CHANNEL)) return;

        String message = new String(event.getData(), StandardCharsets.UTF_8);
        logger.info("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Paper: " + message);

        sendMessageToPaper(message);
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç –Ω–∞ Paper
    private void sendMessageToPaper(String message) {
        try (Socket socket = new Socket(paperHost, paperPort);
             OutputStream out = socket.getOutputStream()) {
            out.write(message.getBytes(StandardCharsets.UTF_8));
            out.flush();
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ Paper: " + message);
        } catch (IOException e) {
            logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ Paper: " + e.getMessage());
        }
    }
}