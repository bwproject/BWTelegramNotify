package me.projectbw.BWTelegramNotify;

import com.google.inject.Inject;
import com.velocitypowered.api.command.CommandManager;
import com.velocitypowered.api.command.CommandMeta;
import com.velocitypowered.api.event.Subscribe;
import com.velocitypowered.api.event.connection.DisconnectEvent;
import com.velocitypowered.api.event.connection.LoginEvent;
import com.velocitypowered.api.event.player.ServerConnectedEvent;
import com.velocitypowered.api.event.proxy.ProxyInitializeEvent;
import com.velocitypowered.api.event.proxy.ProxyShutdownEvent;
import com.velocitypowered.api.plugin.Plugin;
import com.velocitypowered.api.proxy.Player;
import com.velocitypowered.api.proxy.ProxyServer;
import net.kyori.adventure.text.Component;
import org.simpleyaml.configuration.file.YamlConfiguration;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Optional;
import java.util.logging.Logger;

@Plugin(
    id = "bwtelegramnotify",
    name = "BWTelegramNotify",
    version = "1.0.0",
    description = "–ü–ª–∞–≥–∏–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram",
    authors = {"The_Mr_Mes109"}
)
public class VelocityMain {
    private final ProxyServer server;
    private final Logger logger;
    private final Path configFile;
    private TelegramBot telegramBot;
    private YamlConfiguration config;
    private String botName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    private String chatId = "–ù–µ –∑–∞–¥–∞–Ω";

    @Inject
    public VelocityMain(ProxyServer server, Logger logger, @com.velocitypowered.api.plugin.annotation.DataDirectory Path dataFolder) {
        this.server = server;
        this.logger = logger;
        this.configFile = dataFolder.resolve("config.yml");
    }

    @Subscribe
    public void onProxyInitialization(ProxyInitializeEvent event) {
        logger.info("==================================");
        logger.info("=== BWTelegramNotify –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è ===");
        logger.info("==================================");

        loadConfig();

        if (config.getBoolean("updater.enabled", true)) {
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...");
            new PluginUpdater().checkForUpdates();
        }

        if (telegramBot != null) {
            String message = config.getString("messages.server_started", "üîµ **–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!**");
            telegramBot.sendMessage(message);
        }

        registerCommands();

        logger.info("BWTelegramNotify —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!");
    }

    private void registerCommands() {
        CommandManager commandManager = server.getCommandManager();
        CommandMeta meta = commandManager.metaBuilder("bwbotstatus").plugin(this).build();
        commandManager.register(meta, new BWBotStatusCommand(this));
        logger.info("–ö–æ–º–∞–Ω–¥–∞ /bwbotstatus –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.");
    }

    @Subscribe
    public void onProxyShutdown(ProxyShutdownEvent event) {
        logger.info("BWTelegramNotify: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞...");
        if (telegramBot != null) {
            String message = config.getString("messages.server_stopped", "üî¥ **–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω!**");
            telegramBot.sendMessage(message);
        }
        logger.info("BWTelegramNotify —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.");
    }

    @Subscribe
    public void onPlayerLogin(LoginEvent event) {
        String playerName = event.getPlayer().getUsername();
        logger.info("–ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª: " + playerName);
        if (telegramBot != null) {
            String message = config.getString("messages.player_logged_in", "‚úÖ **–ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª**: %player%");
            telegramBot.sendMessage(message.replace("%player%", playerName));
        }
    }

    @Subscribe
    public void onPlayerDisconnect(DisconnectEvent event) {
        String playerName = event.getPlayer().getUsername();
        logger.info("–ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª: " + playerName);
        if (telegramBot != null) {
            String message = config.getString("messages.player_logged_out", "‚ùå **–ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª**: %player%");
            telegramBot.sendMessage(message.replace("%player%", playerName));
        }
    }

    @Subscribe
    public void onPlayerSwitchServer(ServerConnectedEvent event) {
        Player player = event.getPlayer();
        Optional<String> previousServer = event.getPreviousServer().map(server -> server.getServerInfo().getName());
        String newServer = event.getServer().getServerInfo().getName();

        logger.info("–ò–≥—Ä–æ–∫ " + player.getUsername() + " —Å–º–µ–Ω–∏–ª —Å–µ—Ä–≤–µ—Ä: " + previousServer.orElse("null") + " -> " + newServer);

        if (telegramBot != null) {
            String message;
            if (previousServer.isPresent()) {
                message = config.getString("messages.player_switched_server", "üîÑ **–ò–≥—Ä–æ–∫ —Å–º–µ–Ω–∏–ª —Å–µ—Ä–≤–µ—Ä**: %player%\n‚û° **%previous_server%** ‚Üí **%new_server%**");
                telegramBot.sendMessage(message
                        .replace("%player%", player.getUsername())
                        .replace("%previous_server%", previousServer.get())
                        .replace("%new_server%", newServer));
            } else {
                message = config.getString("messages.player_joined_server", "‚û° **–ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä**: %player%\nüü¢ **–°–µ—Ä–≤–µ—Ä**: %new_server%");
                telegramBot.sendMessage(message
                        .replace("%player%", player.getUsername())
                        .replace("%new_server%", newServer));
            }
        }
    }

    private void loadConfig() {
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ config.yml...");
        if (!Files.exists(configFile)) {
            try {
                Files.createDirectories(configFile.getParent());
                Files.createFile(configFile);
                Files.writeString(configFile, """
                        telegram:
                          token: ""
                          bot_name: "MyTelegramBot"
                          chat_id: "-1001234567890"
                        
                        messages:
                          server_started: "üîµ **–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!**"
                          server_stopped: "üî¥ **–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω!**"
                          player_logged_in: "‚úÖ **–ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª**: %player%"
                          player_logged_out: "‚ùå **–ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª**: %player%"
                          player_switched_server: "üîÑ **–ò–≥—Ä–æ–∫ —Å–º–µ–Ω–∏–ª —Å–µ—Ä–≤–µ—Ä**: %player%\n‚û° **%previous_server%** ‚Üí **%new_server%**"
                          player_joined_server: "‚û° **–ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä**: %player%\nüü¢ **–°–µ—Ä–≤–µ—Ä**: %new_server%"
                        
                        updater:
                          enabled: true
                        """);
                logger.warning("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π config.yml. –ó–∞–ø–æ–ª–Ω–∏ –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!");
                return;
            } catch (IOException e) {
                logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ config.yml: " + e.getMessage());
            }
        }

        try {
            config = YamlConfiguration.loadConfiguration(configFile.toFile());
            logger.info("config.yml –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ.");
        } catch (IOException e) {
            logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ config.yml: " + e.getMessage());
        }

        String botToken = config.getString("telegram.token", "");
        botName = config.getString("telegram.bot_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ");
        chatId = config.getString("telegram.chat_id", "–ù–µ –∑–∞–¥–∞–Ω");

        if (botToken.isEmpty() || chatId.isEmpty()) {
            logger.severe("–í config.yml –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ ID —á–∞—Ç–∞! –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.");
            return;
        }

        telegramBot = new TelegramBot(botToken, List.of(chatId));
        logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω: " + botName);
    }

    public String getBotName() {
        return botName;
    }

    public String getChatId() {
        return chatId;
    }
}