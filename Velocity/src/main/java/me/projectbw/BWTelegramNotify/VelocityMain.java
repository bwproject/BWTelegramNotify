// VelocityMain.java
package me.projectbw.BWTelegramNotify;

import com.google.inject.Inject;
import com.velocitypowered.api.event.Subscribe;
import com.velocitypowered.api.event.connection.DisconnectEvent;
import com.velocitypowered.api.event.connection.LoginEvent;
import com.velocitypowered.api.event.player.ServerConnectedEvent;
import com.velocitypowered.api.event.proxy.ProxyInitializeEvent;
import com.velocitypowered.api.event.proxy.ProxyShutdownEvent;
import com.velocitypowered.api.plugin.Plugin;
import com.velocitypowered.api.proxy.Player;
import com.velocitypowered.api.proxy.ProxyServer;
import org.simpleyaml.configuration.file.YamlConfiguration;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Optional;
import java.util.logging.Logger;

@Plugin(
    id = "bwtelegramnotify",
    name = "BWTelegramNotify",
    version = "1.1.0",
    description = "–ü–ª–∞–≥–∏–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram",
    authors = {"The_Mr_Mes109"}
)
public class VelocityMain {
    private final ProxyServer server;
    private final Logger logger;
    private final Path configFile;
    private YamlConfiguration config;
    private TelegramBot telegramBot;
    private boolean fakePlayerEnabled;
    private String fakePlayerName;

    @Inject
    public VelocityMain(ProxyServer server, Logger logger, @com.velocitypowered.api.plugin.annotation.DataDirectory Path dataFolder) {
        this.server = server;
        this.logger = logger;
        this.configFile = dataFolder.resolve("config.yml");
    }

    @Subscribe
    public void onProxyInitialization(ProxyInitializeEvent event) {
        logger.info("==================================");
        logger.info("=== BWTelegramNotify –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è ===");
        logger.info("==================================");

        try {
            loadConfig();
        } catch (IOException e) {
            logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + e.getMessage());
            return;
        }

        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–∫—Å–∏
        if (telegramBot != null) {
            telegramBot.sendMessage(config.getString("messages.server_started", "üîµ **–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!**"));
        }

        logger.info("BWTelegramNotify —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!");
    }

    @Subscribe
    public void onProxyShutdown(ProxyShutdownEvent event) {
        logger.info("BWTelegramNotify: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞...");
        if (telegramBot != null) {
            telegramBot.sendMessage(config.getString("messages.server_stopped", "üî¥ **–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω!**"));
        }
        logger.info("BWTelegramNotify —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.");
    }

    @Subscribe
    public void onPlayerLogin(LoginEvent event) {
        String playerName = event.getPlayer().getUsername();
        logger.info("–ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª: " + playerName);
        if (telegramBot != null) {
            telegramBot.sendMessage(config.getString("messages.player_logged_in", "‚úÖ **–ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª**: %player%").replace("%player%", playerName));
        }
    }

    @Subscribe
    public void onPlayerDisconnect(DisconnectEvent event) {
        String playerName = event.getPlayer().getUsername();
        logger.info("–ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª: " + playerName);
        if (telegramBot != null) {
            telegramBot.sendMessage(config.getString("messages.player_logged_out", "‚ùå **–ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª**: %player%").replace("%player%", playerName));
        }
    }

    @Subscribe
    public void onPlayerSwitchServer(ServerConnectedEvent event) {
        Player player = event.getPlayer();
        Optional<String> previousServer = event.getPreviousServer().map(server -> server.getServerInfo().getName());
        String newServer = event.getServer().getServerInfo().getName();

        logger.info("–ò–≥—Ä–æ–∫ " + player.getUsername() + " —Å–º–µ–Ω–∏–ª —Å–µ—Ä–≤–µ—Ä: " + previousServer.orElse("null") + " -> " + newServer);

        if (telegramBot != null) {
            String message;
            if (previousServer.isPresent()) {
                message = config.getString("messages.player_switched_server", "üîÑ **–ò–≥—Ä–æ–∫ —Å–º–µ–Ω–∏–ª —Å–µ—Ä–≤–µ—Ä**: %player%\n‚û° **%previous_server%** ‚Üí **%new_server%**");
                telegramBot.sendMessage(message
                        .replace("%player%", player.getUsername())
                        .replace("%previous_server%", previousServer.get())
                        .replace("%new_server%", newServer));
            } else {
                message = config.getString("messages.player_joined_server", "‚û° **–ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä**: %player%\nüü¢ **–°–µ—Ä–≤–µ—Ä**: %new_server%");
                telegramBot.sendMessage(message
                        .replace("%player%", player.getUsername())
                        .replace("%new_server%", newServer));
            }
        }
    }

    private void loadConfig() throws IOException {  // –¥–æ–±–∞–≤–ª–µ–Ω–æ "throws IOException"
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ config.yml...");

        // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
        if (!Files.exists(configFile)) {
            try (InputStream in = getClass().getClassLoader().getResourceAsStream("config.yml")) {
                if (in == null) {
                    logger.severe("–ù–µ –Ω–∞–π–¥–µ–Ω config.yml –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö! –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ src/main/resources.");
                    return;
                }

                Files.createDirectories(configFile.getParent());
                Files.copy(in, configFile);
                logger.warning("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π config.yml –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤.");
            } catch (IOException e) {
                logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ config.yml: " + e.getMessage());
                throw e;  // –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
        config = YamlConfiguration.loadConfiguration(configFile.toFile());
        logger.info("config.yml –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ.");

        // –ß—Ç–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        fakePlayerEnabled = config.getBoolean("fake_player.enabled", true);
        fakePlayerName = config.getString("fake_player.name", "projectbw.ru");

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞
        String botToken = config.getString("telegram.token", "");
        if (!botToken.isEmpty()) {
            telegramBot = new TelegramBot(botToken, config.getStringList("telegram.chats"));
            logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω.");
        } else {
            logger.warning("–¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.");
        }
    }

    public boolean isFakePlayerEnabled() {
        return fakePlayerEnabled;
    }

    public String getFakePlayerName() {
        return fakePlayerName;
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    public void forwardMessageToTelegram(String message) {
        if (telegramBot != null) {
            telegramBot.sendMessage(message);
        } else {
            logger.warning("Telegram-–±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
        }
    }
}