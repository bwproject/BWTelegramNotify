package me.projectbw.BWTelegramNotify;

import com.google.inject.Inject;
import com.velocitypowered.api.event.Subscribe;
import com.velocitypowered.api.event.connection.DisconnectEvent;
import com.velocitypowered.api.event.connection.LoginEvent;
import com.velocitypowered.api.event.player.ServerConnectedEvent;
import com.velocitypowered.api.event.proxy.ProxyShutdownEvent;
import com.velocitypowered.api.event.proxy.ProxyInitializeEvent;
import com.velocitypowered.api.plugin.Dependency;
import com.velocitypowered.api.plugin.Plugin;
import com.velocitypowered.api.plugin.annotation.DataDirectory;
import com.velocitypowered.api.proxy.Player;
import com.velocitypowered.api.proxy.ProxyServer;
import org.simpleyaml.configuration.file.YamlConfiguration;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Optional;
import java.util.logging.Logger;

@Plugin(
        id = "bwtelegramnotify",
        name = "BWTelegramNotify",
        version = "1.0-SNAPSHOT",
        description = "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram –æ —Å–æ–±—ã—Ç–∏—è—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
        authors = {"The_Mr_Mes109"},
        dependencies = {@Dependency(id = "velocity")}
)
public class VelocityMain {
    private final ProxyServer server;
    private final Logger logger;
    private final Path configFile;
    private TelegramBot telegramBot;

    @Inject
    public VelocityMain(ProxyServer server, Logger logger, @DataDirectory Path dataFolder) {
        this.server = server;
        this.logger = logger;
        this.configFile = dataFolder.resolve("config.yml");
    }

    @Subscribe
    public void onProxyInitialization(ProxyInitializeEvent event) {
        logger.info("==================================");
        logger.info("===    BWTelegramNotify –∑–∞–≥—Ä—É–∂–µ–Ω   ===");
        logger.info("==================================");

        loadConfig();

        if (telegramBot != null) {
            telegramBot.sendMessage("üîµ **–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!**");
        }
    }

    @Subscribe
    public void onProxyShutdown(ProxyShutdownEvent event) {
        if (telegramBot != null) {
            telegramBot.sendMessage("üî¥ **–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω!**");
        }
    }

    @Subscribe
    public void onPlayerLogin(LoginEvent event) {
        String playerName = event.getPlayer().getUsername();
        if (telegramBot != null) {
            telegramBot.sendMessage("‚úÖ **–ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª**: " + playerName);
        }
    }

    @Subscribe
    public void onPlayerDisconnect(DisconnectEvent event) {
        String playerName = event.getPlayer().getUsername();
        if (telegramBot != null) {
            telegramBot.sendMessage("‚ùå **–ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª**: " + playerName);
        }
    }

    @Subscribe
    public void onPlayerSwitchServer(ServerConnectedEvent event) {
        Player player = event.getPlayer();
        Optional<String> previousServer = event.getPreviousServer().map(server -> server.getServerInfo().getName());
        String newServer = event.getServer().getServerInfo().getName();

        if (telegramBot != null) {
            if (previousServer.isPresent()) {
                telegramBot.sendMessage("üîÑ **–ò–≥—Ä–æ–∫ —Å–º–µ–Ω–∏–ª —Å–µ—Ä–≤–µ—Ä**: " + player.getUsername() +
                        "\n‚û° **" + previousServer.get() + "** ‚Üí **" + newServer + "**");
            } else {
                telegramBot.sendMessage("‚û° **–ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä**: " + player.getUsername() +
                        "\nüü¢ **–°–µ—Ä–≤–µ—Ä**: " + newServer);
            }
        }
    }

    private void loadConfig() {
        if (!Files.exists(configFile)) {
            try {
                Files.createDirectories(configFile.getParent());
                Files.createFile(configFile);
                Files.writeString(configFile, "bot.token: \"\"\nbot.chat_ids: []\n");
                logger.warning("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π config.yml. –ó–∞–ø–æ–ª–Ω–∏ –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!");
                return;
            } catch (IOException e) {
                logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ config.yml: " + e.getMessage());
                e.printStackTrace(); // –î–æ–±–∞–≤–∏–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                return;
            }
        }

        try {
            YamlConfiguration config = YamlConfiguration.loadConfiguration(configFile.toFile());
            String botToken = config.getString("bot.token", "");
            List<String> chatIds = config.getStringList("bot.chat_ids");

            if (botToken.isEmpty() || chatIds.isEmpty()) {
                logger.severe("–í config.yml –Ω–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤! –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.");
                return;
            }

            telegramBot = new TelegramBot(botToken, chatIds);
            logger.info("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω: " + telegramBot.getBotName() + " (@" + telegramBot.getBotUsername() + ")");
        } catch (Exception e) {  // –î–æ–±–∞–≤–∏–ª –æ–±—â–∏–π `catch`, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
            logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ config.yml: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
