// VelocityMain.java

package me.projectbw.BWTelegramNotify;

import com.google.inject.Inject;
import com.velocitypowered.api.event.Subscribe;
import com.velocitypowered.api.event.connection.DisconnectEvent;
import com.velocitypowered.api.event.connection.LoginEvent;
import com.velocitypowered.api.event.player.ServerConnectedEvent;
import com.velocitypowered.api.event.proxy.ProxyInitializeEvent;
import com.velocitypowered.api.event.proxy.ProxyShutdownEvent;
import com.velocitypowered.api.plugin.Plugin;
import com.velocitypowered.api.proxy.Player;
import com.velocitypowered.api.proxy.ProxyServer;
import net.kyori.adventure.text.Component;
import org.simpleyaml.configuration.file.YamlConfiguration;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.io.InputStream;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.Optional;
import java.util.logging.Logger;

@Plugin(
    id = "bwtelegramnotify",
    name = "BWTelegramNotify",
    version = "1.1.0",
    description = "–ü–ª–∞–≥–∏–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram",
    authors = {"The_Mr_Mes109"}
)
public class VelocityMain {
    private final ProxyServer server;
    private final Logger logger;
    private final Path configFile;
    private TelegramBot telegramBot;
    private YamlConfiguration config;
    private boolean fakePlayerEnabled;
    private String fakePlayerName;

    @Inject
    public VelocityMain(ProxyServer server, Logger logger, @com.velocitypowered.api.plugin.annotation.DataDirectory Path dataFolder) {
        this.server = server;
        this.logger = logger;
        this.configFile = dataFolder.resolve("config.yml");
    }

    @Subscribe
    public void onProxyInitialization(ProxyInitializeEvent event) {
        logger.info("==================================");
        logger.info("=== BWTelegramNotify –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è ===");
        logger.info("==================================");

        loadConfig();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        PluginUpdater updater = new PluginUpdater(this);
        updater.checkForUpdates();

        // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–∫—Å–∏
        if (telegramBot != null) {
            String message = config.getString("messages.server_started", "üîµ **–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!**");
            telegramBot.sendMessage(Component.text(message));
        }

        logger.info("BWTelegramNotify —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!");
    }

    @Subscribe
    public void onProxyShutdown(ProxyShutdownEvent event) {
        logger.info("BWTelegramNotify: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞...");
        if (telegramBot != null) {
            String message = config.getString("messages.server_stopped", "üî¥ **–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω!**");
            telegramBot.sendMessage(Component.text(message));
        }
        logger.info("BWTelegramNotify —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.");
    }

    @Subscribe
    public void onPlayerLogin(LoginEvent event) {
        String playerName = event.getPlayer().getUsername();

        if (fakePlayerEnabled && playerName.equalsIgnoreCase(fakePlayerName)) {
            event.getPlayer().disconnect("–≠—Ç–æ—Ç –Ω–∏–∫ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º—ã.");
            return;
        }

        logger.info("–ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª: " + playerName);
        if (telegramBot != null) {
            String message = config.getString("messages.player_logged_in", "‚úÖ **–ò–≥—Ä–æ–∫ –∑–∞—à–µ–ª**: %player%").replace("%player%", playerName);
            telegramBot.sendMessage(Component.text(message));
        }
    }

    @Subscribe
    public void onPlayerDisconnect(DisconnectEvent event) {
        String playerName = event.getPlayer().getUsername();

        logger.info("–ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª: " + playerName);
        if (telegramBot != null) {
            String message = config.getString("messages.player_logged_out", "‚ùå **–ò–≥—Ä–æ–∫ –≤—ã—à–µ–ª**: %player%").replace("%player%", playerName);
            telegramBot.sendMessage(Component.text(message));
        }
    }

    private void loadConfig() {
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ config.yml...");

        if (!Files.exists(configFile)) {
            try (InputStream inputStream = getClass().getResourceAsStream("/config.yml")) {
                if (inputStream == null) {
                    logger.severe("–ù–µ –Ω–∞–π–¥–µ–Ω config.yml –≤ —Ä–µ—Å—É—Ä—Å–∞—Ö! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ contents JAR-—Ñ–∞–π–ª–∞.");
                    return;
                }

                Files.createDirectories(configFile.getParent());
                Files.copy(inputStream, configFile, StandardCopyOption.REPLACE_EXISTING);
                logger.info("config.yml —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤.");
            } catch (IOException e) {
                logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ config.yml: " + e.getMessage());
                return;
            }
        }

        try {
            config = YamlConfiguration.loadConfiguration(configFile.toFile());
            logger.info("config.yml –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ.");
        } catch (Exception e) {
            logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ config.yml: " + e.getMessage());
        }
    }
}