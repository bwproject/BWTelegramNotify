package me.projectbw.BWTelegramNotify;

import org.bukkit.Bukkit;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.event.server.ServerLoadEvent;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitRunnable;

import java.io.*;
import java.net.Socket;
import java.util.logging.Logger;

public class PaperMain extends JavaPlugin implements Listener {

    private Logger logger;
    private static final double TPS_THRESHOLD = 15.0;
    private static final String VELOCITY_SERVER_HOST = "localhost";  // IP Velocity-—Å–µ—Ä–≤–µ—Ä–∞
    private static final int VELOCITY_SERVER_PORT = 12345;  // –ü–æ—Ä—Ç –¥–ª—è —Å–≤—è–∑–∏ —Å Velocity

    @Override
    public void onEnable() {
        this.logger = getLogger();
        logger.info("BWTelegramNotify –ø–ª–∞–≥–∏–Ω –≤–∫–ª—é—á–µ–Ω!");

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        getServer().getPluginManager().registerEvents(this, this);

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
        sendMessageToVelocity("server_started", getServerName());

        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ TPS
        startTPSMonitoring();
    }

    @Override
    public void onDisable() {
        sendMessageToVelocity("server_stopped", getServerName());
        logger.info("BWTelegramNotify –ø–ª–∞–≥–∏–Ω –æ—Ç–∫–ª—é—á–µ–Ω.");
    }

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        sendMessageToVelocity("player_join", event.getPlayer().getName(), getServerName());
    }

    @EventHandler
    public void onPlayerQuit(PlayerQuitEvent event) {
        sendMessageToVelocity("player_quit", event.getPlayer().getName(), getServerName());
    }

    @EventHandler
    public void onServerLoad(ServerLoadEvent event) {
        checkTPS();
    }

    private String getServerName() {
        return Bukkit.getServer().getName();
    }

    private void sendMessageToVelocity(String messageKey, String... args) {
        String message = formatMessage(messageKey, args);
        sendViaSocket(message);
    }

    private String formatMessage(String messageKey, String... args) {
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±—É–¥–µ–º –ø—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω—è—Ç—å placeholder –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        String messageTemplate = getMessageTemplate(messageKey);
        return String.format(messageTemplate, (Object[]) args);
    }

    private String getMessageTemplate(String messageKey) {
        // –í–µ—Ä–Ω–µ–º —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —à–∞–±–ª–æ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        switch (messageKey) {
            case "server_started":
                return "‚úÖ –°–µ—Ä–≤–µ—Ä {server} –∑–∞–ø—É—â–µ–Ω!";
            case "server_stopped":
                return "‚õî –°–µ—Ä–≤–µ—Ä {server} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!";
            case "player_join":
                return "üîµ –ò–≥—Ä–æ–∫ {player} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É {server}!";
            case "player_quit":
                return "‚ö™ –ò–≥—Ä–æ–∫ {player} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä {server}!";
            case "low_tps":
                return "‚ö† –ù–∏–∑–∫–∏–π TPS: {tps} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server}";
            default:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.";
        }
    }

    private void sendViaSocket(String message) {
        try (Socket socket = new Socket(VELOCITY_SERVER_HOST, VELOCITY_SERVER_PORT);
             PrintWriter out = new PrintWriter(socket.getOutputStream(), true)) {
            out.println(message); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ Velocity —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
        } catch (IOException e) {
            logger.severe("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ Velocity —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void checkTPS() {
        double tps = Bukkit.getServer().getTPS()[0];
        if (tps < TPS_THRESHOLD) {
            sendMessageToVelocity("low_tps", String.valueOf(tps), getServerName());
        }
    }

    // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ TPS
    private void startTPSMonitoring() {
        new BukkitRunnable() {
            @Override
            public void run() {
                checkTPS();
            }
        }.runTaskTimerAsynchronously(this, 0L, 1200L); // –ö–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    }
}