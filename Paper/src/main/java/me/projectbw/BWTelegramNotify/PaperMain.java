package me.projectbw.BWTelegramNotify;

import org.bukkit.Bukkit;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.event.server.ServerLoadEvent;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.scheduler.BukkitRunnable;
import org.bukkit.entity.Player;
import org.bukkit.plugin.messaging.PluginMessageListener;

import java.nio.charset.StandardCharsets;
import java.util.logging.Logger;

public class PaperMain extends JavaPlugin implements Listener, PluginMessageListener {

    private Logger logger;
    private static final double TPS_THRESHOLD = 15.0;
    private static final String CHANNEL = "bwtelegram:notify";

    @Override
    public void onEnable() {
        this.logger = getLogger();
        logger.info("BWTelegramNotify –ø–ª–∞–≥–∏–Ω –≤–∫–ª—é—á–µ–Ω!");

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        saveDefaultConfig();

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª –ø–ª–∞–≥–∏–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        getServer().getMessenger().registerOutgoingPluginChannel(this, CHANNEL);
        getServer().getMessenger().registerIncomingPluginChannel(this, CHANNEL, this);

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
        getServer().getPluginManager().registerEvents(this, this);

        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
        sendMessageToVelocity("server_started", getServerName());

        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ TPS
        startTPSMonitoring();
    }

    @Override
    public void onDisable() {
        sendMessageToVelocity("server_stopped", getServerName());
        logger.info("BWTelegramNotify –ø–ª–∞–≥–∏–Ω –æ—Ç–∫–ª—é—á–µ–Ω.");
    }

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        sendMessageToVelocity("player_join", event.getPlayer().getName(), getServerName());
    }

    @EventHandler
    public void onPlayerQuit(PlayerQuitEvent event) {
        sendMessageToVelocity("player_quit", event.getPlayer().getName(), getServerName());
    }

    @EventHandler
    public void onServerLoad(ServerLoadEvent event) {
        checkTPS();
    }

    private String getServerName() {
        return Bukkit.getServer().getName();
    }

    private void sendMessageToVelocity(String messageKey, String... args) {
        String message = formatMessage(messageKey, args);
        sendViaPluginMessage(message);
    }

    private String formatMessage(String messageKey, String... args) {
        String messageTemplate = getMessageTemplate(messageKey);
        return String.format(messageTemplate, (Object[]) args);
    }

    private String getMessageTemplate(String messageKey) {
        switch (messageKey) {
            case "server_started":
                return "‚úÖ –°–µ—Ä–≤–µ—Ä %s –∑–∞–ø—É—â–µ–Ω!";
            case "server_stopped":
                return "‚õî –°–µ—Ä–≤–µ—Ä %s –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!";
            case "player_join":
                return "üîµ –ò–≥—Ä–æ–∫ %s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É %s!";
            case "player_quit":
                return "‚ö™ –ò–≥—Ä–æ–∫ %s –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä %s!";
            case "low_tps":
                return "‚ö† –ù–∏–∑–∫–∏–π TPS: %s –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ %s";
            default:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.";
        }
    }

    private void sendViaPluginMessage(String message) {
        byte[] messageBytes = message.getBytes(StandardCharsets.UTF_8);
        for (Player player : Bukkit.getOnlinePlayers()) {
            player.sendPluginMessage(this, CHANNEL, messageBytes);
            return; // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–º—É –∏–≥—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–π–¥–µ—Ç –¥–æ Velocity
        }
        logger.warning("–ù–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Velocity.");
    }

    private void checkTPS() {
        double tps = Bukkit.getServer().getTPS()[0];
        if (tps < TPS_THRESHOLD) {
            sendMessageToVelocity("low_tps", String.valueOf(tps), getServerName());
        }
    }

    private void startTPSMonitoring() {
        new BukkitRunnable() {
            @Override
            public void run() {
                checkTPS();
            }
        }.runTaskTimerAsynchronously(this, 0L, 1200L); // –ö–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    }

    @Override
    public void onPluginMessageReceived(String channel, Player player, byte[] message) {
        if (!channel.equals(CHANNEL)) return;
        String receivedMessage = new String(message, StandardCharsets.UTF_8);
        logger.info("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Velocity: " + receivedMessage);
    }
}